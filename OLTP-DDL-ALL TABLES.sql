--------------------------------------------------------
--  DDL for OLTP Tables
--------------------------------------------------------
-- Generated by Oracle SQL Developer Data Modeler 21.4.2.059.0838
--   at:        2022-08-11 11:31:58 EDT
--   site:      Oracle Database 12cR2
--   type:      Oracle Database 12cR2


CREATE OR REPLACE TYPE oe.category_typ AS OBJECT (
    category_name        VARCHAR2(50),
    category_description VARCHAR2(1000),
    category_id          NUMBER(2),
    parent_category_id   NUMBER(2),
    NOT INSTANTIABLE MEMBER FUNCTION category_describe RETURN VARCHAR2
) NOT FINAL NOT INSTANTIABLE;
/

-- predefined type, no DDL - MDSYS.SDO_GEOMETRY

-- predefined type, no DDL - XMLTYPE

CREATE TABLE oe.categories_tab OF oe.category_typ (
    category_id NOT NULL,
    CONSTRAINT categories_tab_pk PRIMARY KEY ( category_id )
)
TABLESPACE users LOGGING NO INMEMORY;

CREATE OR REPLACE TYPE phone_list_typ AS
    VARRAY(5) OF VARCHAR2(25);

CREATE OR REPLACE TYPE cust_address_typ AS OBJECT (
    street_address VARCHAR2(40),
    postal_code    VARCHAR2(10),
    city           VARCHAR2(30),
    state_province VARCHAR2(10),
    country_id     CHAR(2)
);

CREATE TABLE oe.customers (
    customer_id       NUMBER(6) NOT NULL,
    cust_first_name   VARCHAR2(20 BYTE)
        CONSTRAINT cust_fname_nn NOT NULL,
    cust_last_name    VARCHAR2(20 BYTE)
        CONSTRAINT cust_lname_nn NOT NULL,
    cust_address      "OE"."CUST_ADDRESS_TYP"
    ,
    phone_numbers     "OE"."PHONE_LIST_TYP"  
    ,
    nls_language      VARCHAR2(3 BYTE),
    nls_territory     VARCHAR2(30 BYTE),
    credit_limit      NUMBER(9, 2),
    cust_email        VARCHAR2(40 BYTE),
    account_mgr_id    NUMBER(6),
    cust_geo_location mdsys.sdo_geometry,
    date_of_birth     DATE,
    marital_status    VARCHAR2(20 BYTE),
    gender            VARCHAR2(1 BYTE),
    income_level      VARCHAR2(20 BYTE)
)
TABLESPACE users LOGGING NO INMEMORY COLUMN cust_geo_location NOT SUBSTITUTABLE AT ALL LEVELS;

ALTER TABLE oe.customers ADD CONSTRAINT customer_id_min CHECK ( customer_id > 0 );

ALTER TABLE oe.customers ADD CONSTRAINT customer_credit_limit_max CHECK ( credit_limit <= 5000 );

COMMENT ON TABLE oe.customers IS
    'Contains customers data either entered by an employee or by the customer
him/herself over the Web.';

COMMENT ON COLUMN oe.customers.customer_id IS
    'Primary key column.';

COMMENT ON COLUMN oe.customers.cust_first_name IS
    'NOT NULL constraint.';

COMMENT ON COLUMN oe.customers.cust_last_name IS
    'NOT NULL constraint.';

COMMENT ON COLUMN oe.customers.cust_address IS
    'Object column of type address_typ.';

COMMENT ON COLUMN oe.customers.phone_numbers IS
    'Varray column of type phone_list_typ';

COMMENT ON COLUMN oe.customers.credit_limit IS
    'Check constraint.';

COMMENT ON COLUMN oe.customers.account_mgr_id IS
    'References hr.employees.employee_id.';

COMMENT ON COLUMN oe.customers.cust_geo_location IS
    'SDO (spatial) column.';

CREATE UNIQUE INDEX oe.customers_pk ON
    oe.customers (
        customer_id
    ASC )
        TABLESPACE users LOGGING;

CREATE INDEX oe.cust_account_manager_ix ON
    oe.customers (
        account_mgr_id
    ASC )
        TABLESPACE users LOGGING;

CREATE INDEX oe.cust_email_ix ON
    oe.customers (
        cust_email
    ASC )
        TABLESPACE users LOGGING;

CREATE INDEX oe.cust_lname_ix ON
    oe.customers (
        cust_last_name
    ASC )
        TABLESPACE users LOGGING;

CREATE INDEX oe.cust_upper_name_ix ON
    oe.customers ( upper("CUST_LAST_NAME"),
    upper("CUST_FIRST_NAME") )
        TABLESPACE users LOGGING;

ALTER TABLE oe.customers
    ADD CONSTRAINT customers_pk PRIMARY KEY ( customer_id )
        USING INDEX oe.customers_pk;

CREATE TABLE hr.employees (
    employee_id    NUMBER(6) NOT NULL,
    first_name     VARCHAR2(20 BYTE),
    last_name      VARCHAR2(25 BYTE)
        CONSTRAINT emp_last_name_nn NOT NULL,
    email          VARCHAR2(25 BYTE)
        CONSTRAINT emp_email_nn NOT NULL,
    phone_number   VARCHAR2(20 BYTE),
    hire_date      DATE
        CONSTRAINT emp_hire_date_nn NOT NULL,
    job_id         VARCHAR2(10 BYTE)
        CONSTRAINT emp_job_nn NOT NULL,
    salary         NUMBER(8, 2),
    commission_pct NUMBER(2, 2),
    manager_id     NUMBER(6),
    department_id  NUMBER(4)
)
TABLESPACE users LOGGING NO INMEMORY;

ALTER TABLE hr.employees ADD CONSTRAINT emp_salary_min CHECK ( salary > 0 );

COMMENT ON TABLE hr.employees IS
    'employees table. Contains 107 rows. References with departments,
jobs, job_history tables. Contains a self reference.';

COMMENT ON COLUMN hr.employees.employee_id IS
    'Primary key of employees table.';

COMMENT ON COLUMN hr.employees.first_name IS
    'First name of the employee. A not null column.';

COMMENT ON COLUMN hr.employees.last_name IS
    'Last name of the employee. A not null column.';

COMMENT ON COLUMN hr.employees.email IS
    'Email id of the employee';

COMMENT ON COLUMN hr.employees.phone_number IS
    'Phone number of the employee; includes country code and area code';

COMMENT ON COLUMN hr.employees.hire_date IS
    'Date when the employee started on this job. A not null column.';

COMMENT ON COLUMN hr.employees.job_id IS
    'Current job of the employee; foreign key to job_id column of the
jobs table. A not null column.';

COMMENT ON COLUMN hr.employees.salary IS
    'Monthly salary of the employee. Must be greater
than zero (enforced by constraint emp_salary_min)';

COMMENT ON COLUMN hr.employees.commission_pct IS
    'Commission percentage of the employee; Only employees in sales
department elgible for commission percentage';

COMMENT ON COLUMN hr.employees.manager_id IS
    'Manager id of the employee; has same domain as manager_id in
departments table. Foreign key to employee_id column of employees table.
(useful for reflexive joins and CONNECT BY query)';

COMMENT ON COLUMN hr.employees.department_id IS
    'Department id where employee works; foreign key to department_id
column of the departments table';

CREATE INDEX hr.emp_department_ix ON
    hr.employees (
        department_id
    ASC )
        TABLESPACE users LOGGING;

CREATE UNIQUE INDEX hr.emp_email_uk ON
    hr.employees (
        email
    ASC )
        TABLESPACE users LOGGING;

CREATE UNIQUE INDEX hr.emp_emp_id_pk ON
    hr.employees (
        employee_id
    ASC )
        TABLESPACE users LOGGING;

CREATE INDEX hr.emp_job_ix ON
    hr.employees (
        job_id
    ASC )
        TABLESPACE users LOGGING;

CREATE INDEX hr.emp_manager_ix ON
    hr.employees (
        manager_id
    ASC )
        TABLESPACE users LOGGING;

CREATE INDEX hr.emp_name_ix ON
    hr.employees (
        last_name
    ASC,
        first_name
    ASC )
        TABLESPACE users LOGGING;

GRANT SELECT, REFERENCES ON hr.employees TO oe;

ALTER TABLE hr.employees
    ADD CONSTRAINT emp_emp_id_pk PRIMARY KEY ( employee_id )
        USING INDEX hr.emp_emp_id_pk;

ALTER TABLE hr.employees
    ADD CONSTRAINT emp_email_uk UNIQUE ( email )
        USING INDEX hr.emp_email_uk;

CREATE TABLE oe.inventories (
    product_id       NUMBER(6) NOT NULL,
    warehouse_id     NUMBER(3)
        CONSTRAINT inventory_warehouse_id_nn NOT NULL,
    quantity_on_hand NUMBER(8)
        CONSTRAINT inventory_qoh_nn NOT NULL
)
TABLESPACE users LOGGING NO INMEMORY;

COMMENT ON TABLE oe.inventories IS
    'Tracks availability of products by product_it and warehouse_id.';

COMMENT ON COLUMN oe.inventories.product_id IS
    'Part of concatenated primary key, references product_information.product_id.';

COMMENT ON COLUMN oe.inventories.warehouse_id IS
    'Part of concatenated primary key, references warehouses.warehouse_id.';

CREATE INDEX oe.inventory_ix ON
    oe.inventories (
        warehouse_id
    ASC,
        product_id
    ASC )
        TABLESPACE users LOGGING;

CREATE INDEX oe.inv_product_ix ON
    oe.inventories (
        product_id
    ASC )
        TABLESPACE users LOGGING;

ALTER TABLE oe.inventories
    ADD CONSTRAINT inventory_pk PRIMARY KEY ( product_id,
                                              warehouse_id )
        USING INDEX oe.inventory_ix;

CREATE TABLE oe.order_items (
    order_id     NUMBER(12) NOT NULL,
    line_item_id NUMBER(3) NOT NULL,
    product_id   NUMBER(6) NOT NULL,
    unit_price   NUMBER(8, 2),
    quantity     NUMBER(8)
)
TABLESPACE users LOGGING NO INMEMORY;

COMMENT ON TABLE oe.order_items IS
    'Example of many-to-many resolution.';

COMMENT ON COLUMN oe.order_items.order_id IS
    'Part of concatenated primary key, references orders.order_id.';

COMMENT ON COLUMN oe.order_items.line_item_id IS
    'Part of concatenated primary key.';

COMMENT ON COLUMN oe.order_items.product_id IS
    'References product_information.product_id.';

CREATE INDEX oe.item_order_ix ON
    oe.order_items (
        order_id
    ASC )
        TABLESPACE users LOGGING;

CREATE INDEX oe.item_product_ix ON
    oe.order_items (
        product_id
    ASC )
        TABLESPACE users LOGGING;

CREATE UNIQUE INDEX oe.order_items_pk ON
    oe.order_items (
        order_id
    ASC,
        line_item_id
    ASC )
        TABLESPACE users LOGGING;

CREATE UNIQUE INDEX oe.order_items_uk ON
    oe.order_items (
        order_id
    ASC,
        product_id
    ASC )
        TABLESPACE users LOGGING;

ALTER TABLE oe.order_items
    ADD CONSTRAINT order_items_pk PRIMARY KEY ( order_id,
                                                line_item_id )
        USING INDEX oe.order_items_pk;

CREATE TABLE oe.orders (
    order_id     NUMBER(12) NOT NULL,
    order_date   TIMESTAMP WITH LOCAL TIME ZONE
        CONSTRAINT order_date_nn NOT NULL,
    order_mode   VARCHAR2(8 BYTE),
    customer_id  NUMBER(6)
        CONSTRAINT order_customer_id_nn NOT NULL,
    order_status NUMBER(2),
    order_total  NUMBER(8, 2),
    sales_rep_id NUMBER(6),
    promotion_id NUMBER(6)
)
TABLESPACE users LOGGING NO INMEMORY;

ALTER TABLE oe.orders
    ADD CONSTRAINT order_mode_lov CHECK ( order_mode IN ( 'direct', 'online' ) );

ALTER TABLE oe.orders ADD CONSTRAINT order_total_min CHECK ( order_total >= 0 );

COMMENT ON TABLE oe.orders IS
    'Contains orders entered by a salesperson as well as over the Web.';

COMMENT ON COLUMN oe.orders.order_id IS
    'PRIMARY KEY column.';

COMMENT ON COLUMN oe.orders.order_date IS
    'TIMESTAMP WITH LOCAL TIME ZONE column, NOT NULL constraint.';

COMMENT ON COLUMN oe.orders.order_mode IS
    'CHECK constraint.';

COMMENT ON COLUMN oe.orders.order_status IS
    '0: Not fully entered, 1: Entered, 2: Canceled - bad credit, -
3: Canceled - by customer, 4: Shipped - whole order, -
5: Shipped - replacement items, 6: Shipped - backlog on items, -
7: Shipped - special delivery, 8: Shipped - billed, 9: Shipped - payment plan,-
10: Shipped - paid';

COMMENT ON COLUMN oe.orders.order_total IS
    'CHECK constraint.';

COMMENT ON COLUMN oe.orders.sales_rep_id IS
    'References hr.employees.employee_id.';

COMMENT ON COLUMN oe.orders.promotion_id IS
    'Sales promotion ID. Used in SH schema';

CREATE UNIQUE INDEX oe.order_pk ON
    oe.orders (
        order_id
    ASC )
        TABLESPACE users LOGGING;

CREATE INDEX oe.ord_customer_ix ON
    oe.orders (
        customer_id
    ASC )
        TABLESPACE users LOGGING;

CREATE INDEX oe.ord_order_date_ix ON
    oe.orders (
        order_date
    ASC )
        TABLESPACE users LOGGING;

CREATE INDEX oe.ord_sales_rep_ix ON
    oe.orders (
        sales_rep_id
    ASC )
        TABLESPACE users LOGGING;

ALTER TABLE oe.orders
    ADD CONSTRAINT order_pk PRIMARY KEY ( order_id )
        USING INDEX oe.order_pk;

CREATE TABLE oe.product_descriptions (
    product_id             NUMBER(6) NOT NULL,
    language_id            VARCHAR2(3 BYTE) NOT NULL,
    translated_name        NVARCHAR2(50)
        CONSTRAINT translated_name_nn NOT NULL,
    translated_description NVARCHAR2(2000)
        CONSTRAINT translated_desc_nn NOT NULL
)
TABLESPACE users LOGGING NO INMEMORY;

COMMENT ON TABLE oe.product_descriptions IS
    'Non-industry-specific design, allows selection of NLS-setting-specific data
derived at runtime, for example using the products view.';

COMMENT ON COLUMN oe.product_descriptions.product_id IS
    'Primary key column.';

COMMENT ON COLUMN oe.product_descriptions.language_id IS
    'Primary key column.';

CREATE UNIQUE INDEX oe.prd_desc_pk ON
    oe.product_descriptions (
        product_id
    ASC,
        language_id
    ASC )
        TABLESPACE users LOGGING;

CREATE INDEX oe.prod_name_ix ON
    oe.product_descriptions (
        translated_name
    ASC )
        TABLESPACE users LOGGING;

ALTER TABLE oe.product_descriptions
    ADD CONSTRAINT product_descriptions_pk PRIMARY KEY ( product_id,
                                                         language_id )
        USING INDEX oe.prd_desc_pk;

CREATE TABLE oe.product_information (
    product_id          NUMBER(6) NOT NULL,
    product_name        VARCHAR2(50 BYTE),
    product_description VARCHAR2(2000 BYTE),
    category_id         NUMBER(2),
    weight_class        NUMBER(1),
    warranty_period     INTERVAL YEAR TO MONTH,
    supplier_id         NUMBER(6),
    product_status      VARCHAR2(20 BYTE),
    list_price          NUMBER(8, 2),
    min_price           NUMBER(8, 2),
    catalog_url         VARCHAR2(50 BYTE)
)
TABLESPACE users LOGGING NO INMEMORY;

ALTER TABLE oe.product_information
    ADD CONSTRAINT product_status_lov CHECK ( product_status IN ( 'obsolete', 'orderable', 'planned', 'under development' ) );

COMMENT ON TABLE oe.product_information IS
    'Non-industry-specific data in various categories.';

COMMENT ON COLUMN oe.product_information.product_id IS
    'Primary key column.';

COMMENT ON COLUMN oe.product_information.product_description IS
    'Primary language description corresponding to translated_description in
oe.product_descriptions, added to provide non-NLS text columns for OC views
to accss.';

COMMENT ON COLUMN oe.product_information.category_id IS
    'Low cardinality column, can be used for bitmap index.
Schema SH uses it as foreign key';

COMMENT ON COLUMN oe.product_information.weight_class IS
    'Low cardinality column, can be used for bitmap index.';

COMMENT ON COLUMN oe.product_information.warranty_period IS
    'INTERVAL YEAER TO MONTH column, low cardinality, can be used for bitmap
index.';

COMMENT ON COLUMN oe.product_information.supplier_id IS
    'Offers possibility of extensions outside Common Schema.';

COMMENT ON COLUMN oe.product_information.product_status IS
    'Check constraint. Appropriate for complex rules, such as "All products in
status PRODUCTION must have at least one inventory entry." Also appropriate
for a trigger auditing status change.';

CREATE UNIQUE INDEX oe.product_information_pk ON
    oe.product_information (
        product_id
    ASC )
        TABLESPACE users LOGGING;

CREATE INDEX oe.prod_supplier_ix ON
    oe.product_information (
        supplier_id
    ASC )
        TABLESPACE users LOGGING;

ALTER TABLE oe.product_information
    ADD CONSTRAINT product_information_pk PRIMARY KEY ( product_id )
        USING INDEX oe.product_information_pk;

CREATE TABLE oe.promotions (
    promo_id       NUMBER(6) NOT NULL,
    promo_name     VARCHAR2(200 BYTE),
    promo_category VARCHAR2(200 BYTE)
)
TABLESPACE users LOGGING NO INMEMORY;

CREATE UNIQUE INDEX oe.promo_id_pk ON
    oe.promotions (
        promo_id
    ASC )
        TABLESPACE users LOGGING;

ALTER TABLE oe.promotions
    ADD CONSTRAINT promo_id_pk PRIMARY KEY ( promo_id )
        USING INDEX oe.promo_id_pk;

CREATE TABLE oe.warehouses (
    warehouse_id    NUMBER(3) NOT NULL,
    warehouse_spec  XMLTYPE,
    warehouse_name  VARCHAR2(35 BYTE),
    location_id     NUMBER(4),
    wh_geo_location mdsys.sdo_geometry
)
TABLESPACE users LOGGING NO INMEMORY XMLTYPE COLUMN warehouse_spec STORE AS BINARY XML (
    STORAGE ( PCTINCREASE 0 MINEXTENTS 1 MAXEXTENTS UNLIMITED FREELISTS 1 BUFFER_POOL DEFAULT )
    RETENTION
    ENABLE STORAGE IN ROW
    NOCACHE
) 
        ALLOW NONSCHEMA 
    COLUMN WH_GEO_LOCATION NOT SUBSTITUTABLE AT ALL
levels;

COMMENT ON TABLE oe.warehouses IS
    'Warehouse data unspecific to any industry.';

COMMENT ON COLUMN oe.warehouses.warehouse_id IS
    'Primary key column.';

COMMENT ON COLUMN oe.warehouses.location_id IS
    'Primary key column, references hr.locations.location_id.';

COMMENT ON COLUMN oe.warehouses.wh_geo_location IS
    'SDO (spatial) column.';

CREATE UNIQUE INDEX oe.warehouses_pk ON
    oe.warehouses (
        warehouse_id
    ASC )
        TABLESPACE users LOGGING;

CREATE INDEX oe.whs_location_ix ON
    oe.warehouses (
        location_id
    ASC )
        TABLESPACE users LOGGING;

ALTER TABLE oe.warehouses
    ADD CONSTRAINT warehouses_pk PRIMARY KEY ( warehouse_id )
        USING INDEX oe.warehouses_pk;

ALTER TABLE oe.customers
    ADD CONSTRAINT customers_account_manager_fk FOREIGN KEY ( account_mgr_id )
        REFERENCES hr.employees ( employee_id )
            ON DELETE SET NULL
    NOT DEFERRABLE;

ALTER TABLE hr.employees
    ADD CONSTRAINT emp_dept_fk FOREIGN KEY ( department_id )
        REFERENCES hr.departments ( department_id )
    NOT DEFERRABLE;

ALTER TABLE hr.employees
    ADD CONSTRAINT emp_job_fk FOREIGN KEY ( job_id )
        REFERENCES hr.jobs ( job_id )
    NOT DEFERRABLE;

ALTER TABLE hr.employees
    ADD CONSTRAINT emp_manager_fk FOREIGN KEY ( manager_id )
        REFERENCES hr.employees ( employee_id )
    NOT DEFERRABLE;

ALTER TABLE oe.inventories
    ADD CONSTRAINT inventories_product_id_fk FOREIGN KEY ( product_id )
        REFERENCES oe.product_information ( product_id )
    NOT DEFERRABLE;

ALTER TABLE oe.inventories
    ADD CONSTRAINT inventories_warehouses_fk FOREIGN KEY ( warehouse_id )
        REFERENCES oe.warehouses ( warehouse_id )
    NOT DEFERRABLE NOVALIDATE;

ALTER TABLE oe.order_items
    ADD CONSTRAINT order_items_order_id_fk FOREIGN KEY ( order_id )
        REFERENCES oe.orders ( order_id )
            ON DELETE CASCADE
    NOT DEFERRABLE NOVALIDATE;

ALTER TABLE oe.order_items
    ADD CONSTRAINT order_items_product_id_fk FOREIGN KEY ( product_id )
        REFERENCES oe.product_information ( product_id )
    NOT DEFERRABLE;

ALTER TABLE oe.orders
    ADD CONSTRAINT orders_customer_id_fk FOREIGN KEY ( customer_id )
        REFERENCES oe.customers ( customer_id )
    NOT DEFERRABLE;

ALTER TABLE oe.orders
    ADD CONSTRAINT orders_promotions_fk FOREIGN KEY ( promotion_id )
        REFERENCES oe.promotions ( promo_id )
            ON DELETE SET NULL
    NOT DEFERRABLE;

ALTER TABLE oe.orders
    ADD CONSTRAINT orders_sales_rep_fk FOREIGN KEY ( sales_rep_id )
        REFERENCES hr.employees ( employee_id )
            ON DELETE SET NULL
    NOT DEFERRABLE;

ALTER TABLE oe.product_descriptions
    ADD CONSTRAINT pd_product_id_fk FOREIGN KEY ( product_id )
        REFERENCES oe.product_information ( product_id )
    NOT DEFERRABLE;

ALTER TABLE oe.product_information
    ADD CONSTRAINT product_category_fk FOREIGN KEY ( category_id )
        REFERENCES oe.categories_tab ( category_id )
            ON DELETE SET NULL
    NOT DEFERRABLE;

ALTER TABLE oe.warehouses
    ADD CONSTRAINT warehouses_location_fk FOREIGN KEY ( location_id )
        REFERENCES hr.locations ( location_id )
            ON DELETE SET NULL
    NOT DEFERRABLE;

